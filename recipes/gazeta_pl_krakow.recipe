#!/usr/bin/env python

__license__ = 'GPL v3'
__copyright__ = 'teepel <teepel44@gmail.com> based on GW from fenuks'

'''
krakow.gazeta.pl
'''

from calibre.web.feeds.news import BasicNewsRecipe
import re
from calibre.ebooks.BeautifulSoup import Comment


class gw_krakow(BasicNewsRecipe):
    title = u'Gazeta Wyborcza Kraków'
    __author__ = 'teepel <teepel44@gmail.com> based on GW from fenuks'
    language = 'pl'
    description = u'Wiadomości z Krakowa na portalu Gazeta.pl.'
    category = 'newspaper'
    publication_type = 'newspaper'
    # encoding = 'iso-8859-2'
    masthead_url = 'http://bi.gazeta.pl/im/5/8528/m8528105.gif'
    INDEX = 'http://krakow.gazeta.pl'
    cover_url = 'http://bi.gazeta.pl/i/hp/hp2009/logo.gif'
    remove_empty_feeds = True
    oldest_article = 3
    max_articles_per_feed = 100
    remove_javascript = True
    no_stylesheets = True
    use_embedded_content = False
    ignore_duplicate_articles = {'title', 'url'}

    # rules for gazeta.pl
    preprocess_regexps = [
        (re.compile(u'<b>Czytaj więcej</b>.*', re.DOTALL), lambda m: '</body>')]
    keep_only_tags = [dict(id='gazeta_article')]
    remove_tags = [dict(id=['gazeta_article_tools', 'gazeta_article_miniatures']), dict(
        attrs={'class': ['mod mod_sociallist', 'c0', 'fb', 'voteNeedLogin']})]
    remove_tags_after = dict(id='gazeta_article_body')

    feeds = [(u'Wiadomości', u'http://rss.gazeta.pl/pub/rss/krakow.xml')]

    def print_version(self, url):
        if 'feedsportal.com' in url:
            s = url.rpartition('gazeta0Bpl')
            u = s[2]
            if not s[0]:
                u = url.rpartition('wyborcza0Bpl')[2]
            u = u.replace('/l/', '/')
            u = u.replace('/ia1.htm', '')
            u = u.replace('/story01.htm', '')
            u = u.replace('0C', '/')
            u = u.replace('A', '')
            u = u.replace('0E', '-')
            u = u.replace('0H', ',')
            u = u.replace('0I', '_')
            u = u.replace('0B', '.')
            u = self.INDEX + u
            return u
        else:
            return url

    def preprocess_html(self, soup):
        tag = soup.find(id='Str')
        if soup.find(attrs={'class': 'piano_btn_1'}):
            return None
        elif tag and tag.findAll('a'):
            self.append_page(soup, soup.body)
        return soup

    def append_page(self, soup, appendtag):
        tag = soup.find('div', attrs={'id': 'Str'})
        try:
            baseurl = soup.find(name='meta', attrs={
                                'property': 'og:url'})['content']
        except:
            return 1
        link = tag.findAll('a')[-1]
        while link:
            soup2 = self.index_to_soup(baseurl + link['href'])
            link = soup2.find('div', attrs={'id': 'Str'}).findAll('a')[-1]
            if u'następne' not in link.string:
                link = ''
            pagetext = soup2.find(id='artykul')
            comments = pagetext.findAll(
                text=lambda text: isinstance(text, Comment))
            for comment in comments:
                comment.extract()
            pos = len(appendtag.contents)
            appendtag.insert(pos, pagetext)
        tag.extract()

    def image_url_processor(self, baseurl, url):
        if url.startswith(' '):
            return url.strip()
        else:
            return url
