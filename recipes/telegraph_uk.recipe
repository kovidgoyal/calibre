__license__   = 'GPL v3'
__copyright__ = '2008-2010, Darko Miletic <darko.miletic at gmail.com>'
'''
telegraph.co.uk
'''

import json
from calibre.web.feeds.news import BasicNewsRecipe

def classes(classes):
    q = frozenset(classes.split(' '))
    return dict(attrs={'class':lambda x:x and frozenset(x.split()).intersection(q)})

class TelegraphUK(BasicNewsRecipe):
    title                 = 'Telegraph.co.uk'
    __author__            = 'Darko Miletic and Sujata Raman'
    description           = 'News from United Kingdom'
    oldest_article        = 2
    category              = 'news, politics, UK'
    publisher             = 'Telegraph Media Group ltd.'
    max_articles_per_feed = 100
    no_stylesheets        = True
    language              = 'en_GB'
    encoding = 'utf-8'
    ignore_duplicate_articles = {'title', 'url'}
    remove_empty_feeds    = True
    use_embedded_content  = False

    feeds               = [
                        (u'UK News'        , u'http://www.telegraph.co.uk/news/uknews/rss')
                        ,(u'World News'     , u'http://www.telegraph.co.uk/news/worldnews/rss')
                        ,(u'Politics'       , u'http://www.telegraph.co.uk/news/newstopics/politics/rss')
                        ,(u'Finance'        , u'http://www.telegraph.co.uk/finance/rss')
                        ,(u'Technology News', u'http://www.telegraph.co.uk/scienceandtechnology/technology/technologynews/rss')
                        ,(u'UK News'        , u'http://www.telegraph.co.uk/scienceandtechnology/technology/technologyreviews/rss')
                        ,(u'Science News'   , u'http://www.telegraph.co.uk/scienceandtechnology/science/sciencenews/rss')
                        ,(u'Sport'          , u'http://www.telegraph.co.uk/sport/rss')
                        ,(u'Earth News'     , u'http://www.telegraph.co.uk/earth/earthnews/rss')
                        ,(u'Comment'        , u'http://www.telegraph.co.uk/comment/rss')
                        ,(u'Travel'        , u'http://www.telegraph.co.uk/travel/rss')
                        ,(u'How about that?', u'http://www.telegraph.co.uk/news/newstopics/howaboutthat/rss')
    ]

    keep_only_tags = [
        classes('lead-asset-image-container headline__heading footer-author'),
        dict(itemprop='articleBody'),
    ]
    remove_tags = [
        dict(name=['link', 'meta', 'style']),
        classes('videoPlayer'),
    ]
    remove_attributes = 'width height'.split()

    def get_article_url(self, article):
        url = article.get('link', None)
        if 'picture-galleries' in url or 'pictures' in url or 'picturegalleries' in url :
            url = None
        return url

    def preprocess_html(self, soup):
        for img in soup.findAll('img', attrs={'data-frz-src-array':True}):
            d = json.loads(img['data-frz-src-array'].replace("'", '"'))
            for item in d:
                if int(item.get('width', 0)) > 700:
                    img['src'] = item['src']
                    break
        return soup
