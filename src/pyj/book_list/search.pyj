# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals

from ajax import ajax
from dom import clear, set_css, build_rule, svgicon
from elementmaker import E
from gettext import gettext as _
from widgets import create_button, create_spinner, Breadcrumbs, add_extra_css
from modals import show_modal
from book_list.globals import get_boss, get_session_data
from book_list.theme import get_color, get_font_size

sp_counter = 0
CLASS_NAME = 'book-search-panel'
add_extra_css(def():
    sel = '.' + CLASS_NAME + ' '

    style =  build_rule(sel + ' div.tag-name:hover', color=get_color('list-hover-foreground'), background_color=get_color('list-hover-background'))
    style += build_rule(sel + ' div.tag-menu:hover', color=get_color('list-hover-foreground'), background_color=get_color('list-hover-background'))
    style += build_rule(sel + ' div.tag-name:active', transform='scale(1.5)')
    style += build_rule(sel + ' div.tag-menu:active', transform='scale(2)')

    # search items list
    style += build_rule(sel + ' ul.search-items', margin_top='1ex', list_style_type='none', text_align='left')
    style += build_rule(sel + ' ul.search-items > li', display='inline-block', cursor='pointer', background_color=get_color('window-background2'), border_radius='10px', padding='0.5ex', margin_right='1em')
    style += build_rule(sel + ' ul.search-items > li:hover', color='red')
    style += build_rule(sel + ' ul.search-items > li:active', transform='scale(1.5)')

    # Actions popup
    style +=  build_rule('#modal-container ul.tb-action-list > li:hover', color=get_color('list-hover-foreground'), background_color=get_color('list-hover-background'))
    style += build_rule('#modal-container ul.tb-action-list > li:active', color='red', color=get_color('list-hover-foreground'), background_color=get_color('list-hover-background'))

    return style
)

class SearchPanel:

    def __init__(self, interface_data, book_list_container):
        nonlocal sp_counter
        sp_counter += 1
        self.container_id = 'search-panel-' + sp_counter
        self.interface_data = interface_data
        self.tag_path = []

        div = E.div(
            id=self.container_id, style='display:none', class_=CLASS_NAME,
            E.div(style="text-align:center; padding:1ex 1em; border-bottom: solid 1px currentColor; margin-bottom: 0.5ex"),  # search input container
            E.div(
                E.div(),
                E.ol(style="display:none"), # breadcrumbs container
                E.div(style="display:none") # tag browser container
            )
        )
        book_list_container.appendChild(div)

        # Build search input
        search_container = div.firstChild
        search_button = create_button(_('Search'), icon='search', action=self.execute_search.bind(self), tooltip=_('Do the search'))
        search_container.appendChild(E.div(style="display: flex; width: 100%;",
            E.input(
                type='search', name='search-books',
                title=_('Search for books'), placeholder=_('Enter the search query'),
                style="flex-grow: 10; margin-right: 0.5em", onkeydown=self.on_input_keydown.bind(self),
            ),
            search_button
        ))
        search_container.appendChild(E.ul(class_='search-items'))

        # Build loading panel
        loading_panel = div.lastChild.firstChild
        loading_panel.appendChild(E.div(
            create_spinner(), '\xa0' + _('Fetching data for the tag browser, please wait') + 'â€¦',
            style='margin-left:auto; margin-right:auto; font-size: 1.5rem; font-weight; bold; text-align:center; margin-top:30vh')
        )
        self.breadcrumbs = Breadcrumbs(self.breadcrumbs_container)
        self.initial_load_started = False
        self.currently_loading = None
        self.tag_browser_data = None
        self.node_id_map = {}
        self.active_nodes = {}

    def on_input_keydown(self, event):
        if event.keyCode is 13:  # Enter
            event.preventDefault(), event.stopPropagation()
            event.target.nextSibling.focus()
            self.execute_search()

    def init(self):
        tb = self.search_control
        # We dont focus the search box because on mobile that will cause the
        # keyboard to popup and obscure the rest of the page
        # tb.focus()
        tb.value = ''
        self.tag_path = []
        self.active_nodes = {}
        if not self.initial_load_started:
            self.initial_load_started = True
            self.refresh()
        else:
            self.render_tag_browser()

    def refresh(self):
        if self.currently_loading is not None:
            self.currently_loading.abort()
            self.currently_loading = None
        sd = get_session_data()
        query = {'library_id': self.interface_data.library_id}
        for k in 'sort_tags_by partition_method collapse_at dont_collapse hide_empty_categories'.split(' '):
            query[k] = sd.get(k) + ''
        xhr = ajax('interface-data/tag-browser', self.on_data_fetched.bind(self), query=query, bypass_cache=False)
        xhr.send()
        self.currently_loading = xhr

    def on_data_fetched(self, end_type, xhr, ev):
        self.currently_loading = None
        if end_type is 'abort':
            return

        parent = self.container.lastChild
        if parent.lastChild.style.display is 'none':
            parent.firstChild.style.display = 'none'
            parent.lastChild.style.display = 'block'
        container = self.tb_container
        clear(container)

        def show_error(error_html):
            ediv = E.div()
            container.appendChild(ediv)
            ediv.innerHTML = '<h3>' + _('Failed to load tag browser data') + '</h3>' + error_html

        def process_node(node):
            self.node_id_map[node.id] = node
            node.data = item_map[node.id]
            for child in node.children:
                child.parent = node
                process_node(child)

        if end_type is 'load':
            try:
                tag_browser_data = JSON.parse(xhr.responseText)
            except Exception as err:
                show_error(err + '')
                return
            item_map = tag_browser_data.item_map
            self.tag_browser_data = tag_browser_data.root
            self.node_id_map = {}
            self.active_nodes = {}
            process_node(self.tag_browser_data)
            self.render_tag_browser(container)
        else:
            show_error(xhr.error_html)

    def node_for_path(self, path):
        path = path or self.tag_path
        ans = self.tag_browser_data
        for child_index in path:
            ans = ans.children[child_index]
        return ans

    def render_tag_browser(self, container=None):
        container = container or self.tb_container
        clear(container)
        set_css(container, padding='1ex 1em', display='flex', flex_wrap='wrap', margin_left='-0.5rem')
        self.render_children(container, self.node_for_path().children)
        self.render_breadcrumbs()

    def icon_for_node(self, node):
        ans = self.interface_data.icon_map[node.data.category] or 'column.png'
        return self.interface_data.icon_path + '/' + ans

    def render_children(self, container, children):

        def click_handler(func, i):
            return def():
                func.call(self, i)

        for i, node in enumerate(children):
            data = node.data
            tooltip = ''
            if data.count is not undefined:
                tooltip += '\n' + _('Number of books in this category: {}').format(data.count)
            if data.avg_rating is not undefined:
                tooltip += '\n' + _('Average rating for books in this category: {:.1f}').format(data.avg_rating)
            div = E.div(
                    title=tooltip.lstrip(),
                    style="display:flex; align-items: stretch",
                    E.div(class_='tag-name',
                        style='border-right:solid 1px currentColor; padding: 1ex; display:flex; align-items: center',
                        E.img(src=self.icon_for_node(node), style='display:inline-block; max-height:2.5ex'),
                        '\xa0' + data.name
                    ),
                    E.div(class_='tag-menu',
                        style='padding: 1ex; display:flex; align-items:center',
                        E.div(svgicon('angle-down'))
                    )
            )
            set_css(div, max_width='45vw', border='solid 1px currentColor', border_radius='20px', margin='0.5rem', cursor='pointer', overflow='hidden', user_select='none')
            div.firstChild.addEventListener('click', click_handler(self.node_clicked, i))
            div.lastChild.addEventListener('click', click_handler(self.menu_clicked, i))
            container.appendChild(div)

    def render_breadcrumbs(self):
        container = self.breadcrumbs_container
        if not self.tag_path.length:
            container.style.display = 'none'
            return
        container.style.display = 'inline-block'
        self.breadcrumbs.reset()

        def onclick(i):
            return def(ev):
                self.tag_path = self.tag_path[:i+1]
                self.render_tag_browser()
                ev.preventDefault()
                return True

        def create_breadcrumb(index=-1, item=None):
            li = self.breadcrumbs.add_crumb(onclick(index))
            if item:
                li.appendChild(E.span(item.name))
            else:
                li.appendChild(svgicon('home', '2.2ex', '2.2ex'))

        create_breadcrumb()
        parent = self.tag_browser_data
        for i, index in enumerate(self.tag_path):
            parent = parent.children[index]
            create_breadcrumb(i, parent.data)

    def search_expression_for_item(self, node, state):
        item = node.data
        if item.is_searchable is False or not state or state is 'clear':
            return ''

        search_state = {'plus':'true', 'plusplus':'.true', 'minus':'false', 'minusminus':'.false'}[state]

        if item.is_category:
            category = item.category

            if item.is_first_letter:
                letters_seen = {}
                for child in node.children:
                    if child.data.sort:
                        letters_seen[child.data.sort[0]] = True
                letters_seen = Object.keys(letters_seen)
                if letters_seen.length:
                    charclass = letters_seen.join('')
                    if category is 'authors':
                        expr = r'author_sort:"~(^[{0}])|(&\s*[{0}])"'.format(charclass)
                    elif category is 'series':
                        expr = r'series_sort:"~^[{0}]"'.format(charclass)
                    else:
                        expr = r'{0}:"~^[{1}]"'.format(category, charclass)
                else:
                    expr = '{}:false'.format(category)

            elif category is 'news':
                expr = 'tags:"={}"'.format(item.name)

            else:
                return '{}:{}'.format(category, search_state)

            if 'false' in search_state:
                expr = '(not ' + expr + ')'
            return expr

        category = 'tags' if item.category is 'news' else item.category
        if item.name and item.name[0] is 'â˜…':
            # Assume ratings
            expr = '{}:{}'.format(category, item.name.length)
        else:
            fm = self.interface_data.field_metadata[item.category]
            suffix = ':' if fm and fm.is_csp else ''
            name = item.original_name or item.name or item.sort
            if not name:
                return ''
            name = str.replace(name, '"', r'\"')
            if name[0] is '.':
                name = '.' + name
            if search_state is 'plusplus' or search_state is 'minusminus':
                name = '.' + name
            expr = '{}:"={}{}"'.format(category, name, suffix)

        if 'false' in search_state:
            expr = '(not ' + expr + ')'
        return expr

    def node_clicked(self, i):
        node = self.node_for_path().children[i]
        if node.children and node.children.length:
            self.tag_path.append(i)
            self.render_tag_browser()
        else:
            expr = self.search_expression_for_item(node, 'plus')
            self.execute_search(expr)

    def menu_clicked(self, i):

        def add_to_search(node, search_type):
            return def():
                self.add_to_search(node, search_type)

        def create_details(container, hide_modal):
            node = self.node_for_path().children[i]
            data = node.data
            name = data.original_name or data.name or data.sort
            items = []
            if data.count is not undefined:
                items.append(_('Count: ') + data.count)
            if data.avg_rating is not undefined:
                items.append(_('Rating: {:.1f}').format(data.avg_rating))
            suffix = ''
            if items.length:
                suffix = ' [' + items.join(' ') + ']'

            title = E.h2(
                style='display:flex; align-items: center; border-bottom: solid 1px currentColor; font-weight:bold; font-size:' + get_font_size('title'),
                E.img(src=self.icon_for_node(node), style='height:2ex'),
                E.span('\xa0' + name + suffix)
            )
            container.appendChild(title)
            container.appendChild(E.div(
                style='margin-top:1ex; margin-bottom: 1ex',
                _('Search for books based on this category (a search term will be added to the search box)')
            ))

            ul = E.ul(style='list-style:none; overflow:hidden', class_='tb-action-list')
            container.appendChild(ul)
            items = [
                (_('Books matching this category'), 'plus'),
                (_('Books that do not match this category'), 'minus'),
            ]
            if node.data.is_hierarchical is 5:
                items.extend([
                    (_('Books that match this category and all sub-categories'), 'plusplus'),
                    (_('Books that do not match this category or any of its sub-categories'), 'minusminus'),
                ])
            for text, search_type in items:
                li = E.li(
                    style='display:flex; align-items: center; margin-bottom:0.5ex; padding: 0.5ex; cursor:pointer',
                    E.img(src='{}/{}.png'.format(self.interface_data.icon_path, search_type), style='max-height: 2.5ex'),
                    E.span('\xa0' + text)
                )
                li.addEventListener('click', add_to_search(node, search_type))
                li.addEventListener('click', hide_modal)
                ul.appendChild(li)
            f = E.form(
                    style='text-align:left; border-top: solid 1px currentColor; padding-top:1ex; margin-top:0.5ex; display:flex; align-items:center',
                    E.span(_('Add to the search expression with:')),
                    E.input(type='radio', name='expr_join', value='OR', checked=''),
                    E.span('\xa0OR\xa0'),
                    E.input(type='radio', name='expr_join', value='AND'),
                    E.span('\xa0AND')
            )
            and_control = f.lastChild.previousSibling
            and_control.checked = get_session_data().get('and_search_terms')
            container.appendChild(f)
            and_control.addEventListener('change', def(ev):
                get_session_data().set('and_search_terms', bool(ev.target.checked))
            )
            f.firstChild.nextSibling.addEventListener('change', def(ev):
                get_session_data().set('and_search_terms', not ev.target.checked)
            )
        show_modal(create_details)

    def add_to_search(self, node, search_type, anded):
        if anded is undefined or anded is None:
            anded = get_session_data().get('and_search_terms')
        self.active_nodes[node.id] = [search_type, anded]
        self.render_search_expression()

    def render_search_expression(self):
        def remove_expression(node_id):
            return def():
                v'delete self.active_nodes[node_id]'
                self.render_search_expression()
        parts = []
        container = self.search_items_container
        clear(container)
        for node_id in Object.keys(self.active_nodes):
            search_type, anded = self.active_nodes[node_id]
            node = self.node_id_map[node_id]
            expr = self.search_expression_for_item(node, search_type)
            name = node.data.original_name or node.data.name or node.data.sort or ''
            if expr:
                c = E.li(svgicon('remove'), '\xa0' + name)
                container.appendChild(c)
                c.addEventListener('click', remove_expression(node_id))
                if parts.length:
                    expr = ('and' if anded else 'or') + ' ' + expr
                parts.push(expr)
        self.search_control.value = parts.join(' ')

    def get_prefs(self):
        return [
            {
                'name': 'sort_tags_by',
                'text': _('Sort tags by'),
                'choices': [('name', _('Name')), ('popularity', _('Popularity (number of books)')), ('rating', _('Average rating'))],
                'tooltip': _('Change how the tags/authors/etc. are sorted in the Tag Browser'),
            },

            {
                'name':'partition_method',
                'text':_('Tags browser category partitioning method'),
                'choices':[('first letter', _('First Letter')), ('disable', _('Disable')), ('partition', _('Partition'))],
                'tooltip':_('Choose how tag browser subcategories are displayed when'
                            ' there are more items than the limit. Select by first'
                            ' letter to see an A, B, C list. Choose partitioned to'
                            ' have a list of fixed-sized groups. Set to disabled'
                            ' if you never want subcategories.'),
            },

            {
                'name':'collapse_at',
                'text':_('Collapse when more items than'),
                'min': 5, 'max':10000, 'step':5,
                'from_storage':int, 'to_storage':int,
                'tooltip': _('If a Tag Browser category has more than this number of items, it is divided'
                             ' up into subcategories. If the partition method is set to disable, this value is ignored.'),
            },

            {
                'name': 'dont_collapse',
                'text': _('Categories not to partition'),
                'tooltip': _('A comma-separated list of categories in which items containing'
                             ' periods are displayed in the tag browser trees. For example, if'
                             " this box contains 'tags' then tags of the form 'Mystery.English'"
                             " and 'Mystery.Thriller' will be displayed with English and Thriller"
                             " both under 'Mystery'. If 'tags' is not in this box,"
                             ' then the tags will be displayed each on their own line.'),
            },

            {
                'name': 'hide_empty_categories',
                'text': _('Hide empty categories (columns)'),
                'from_storage': def(x): return x.toLowerCase() is 'yes';,
                'to_storage': def(x): return 'yes' if x else 'no';,
                'tooltip':_('When checked, calibre will automatically hide any category'
                            ' (a column, custom or standard) that has no items to show. For example, some'
                            ' categories might not have values when using virtual libraries. Checking this'
                            ' box will cause these empty categories to be hidden.'),
            },

        ]

    def apply_prefs(self):
        container = self.tb_container
        clear(container)
        container.appendChild(E.div(
            style='margin: 1ex 1em',
            _('Reloading tag browser with updated settings, please wait...'))
        )
        self.refresh()

    @property
    def container(self):
        return document.getElementById(self.container_id)

    @property
    def breadcrumbs_container(self):
        return self.tb_container.previousSibling

    @property
    def tb_container(self):
        return self.container.lastChild.lastChild

    @property
    def search_control(self):
        return self.container.querySelector('input[name="search-books"]')

    @property
    def search_items_container(self):
        return self.container.firstChild.lastChild

    @property
    def is_visible(self):
        self.container.style.display is 'block'

    @is_visible.setter
    def is_visible(self, val):
        self.container.style.display = 'block' if val else 'none'

    def execute_search(self, text=''):
        text = text or self.search_control.value or ''
        get_boss().ui.books_view.change_search(text)
