# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

from ajax import ajax_send, encode_query
from dom import set_css, build_rule, clear
from elementmaker import E
from gettext import gettext as _
from modals import error_dialog, ajax_progress_dialog

from book_list.globals import get_session_data, get_boss
from widgets import create_button, create_spinner

THUMBNAIL_MAX_WIDTH = 300
THUMBNAIL_MAX_HEIGHT = 400

bv_counter = 0

class BooksView:

    def __init__(self, interface_data, book_list_container):
        nonlocal bv_counter
        bv_counter += 1
        self.interface_data = interface_data
        self.is_fetching = None
        self.shown_book_ids = set()
        self.container_id = 'books-view-' + bv_counter
        # We have to apply the transform on the containing div not the img because of a bug in WebKit
        # that causes img aspect ratios to be messed up on window resize if the transform is specified
        # on the img itself
        style = build_rule('#' + self.container_id + ' .cover_grid > div:hover', transform='scale(1.2)')
        style += build_rule('#' + self.container_id + ' .cover_grid > div:active', transform='scale(2.0)')
        div = E.div(
            id=self.container_id, style='display:block',
            E.style(style),
            E.div(),
            E.div()
        )
        book_list_container.appendChild(div)
        self.set_view_mode(get_session_data().get('view_mode'))
        self.create_more_button(div)

    def create_more_button(self, div):
        more = div.lastChild
        more.appendChild(create_button(
            _('Show more books'), 'cloud-download', def():self.get_more_books()
        ))
        more.lastChild.setAttribute('rel', 'next')
        set_css(more.firstChild, display='block', margin_left='auto', margin_right='auto')
        set_css(more, font_size='1.5rem', padding_top='1.5rem', margin_bottom='1.5rem', width='100%', text_align='center')
        more.appendChild(E.div(
            create_spinner(), '\xa0' + _('Fetching metadata for more books, please wait') + '…',
            style='margin-left:auto; margin-right:auto; display:none')
        )
        self.update_fetching_status()

    def set_view_mode(self, mode='cover_grid'):
        if self.mode == mode:
            return
        if mode not in v"['cover_grid']":
            mode = 'cover_grid'
        self.mode = mode
        if mode == 'cover_grid':
            self.render_book = self.cover_grid_item.bind(self)
            self.init_grid = self.init_cover_grid.bind(self)
        self.clear()
        self.render_ids()

    @property
    def container(self):
        return document.getElementById(self.container_id)

    @property
    def grid(self):
        return self.container.lastChild.previousSibling

    @property
    def is_visible(self):
        self.container.style.display == 'block'

    @is_visible.setter
    def is_visible(self, val):
        self.container.style.display = 'block' if val else 'none'

    def clear(self):
        # We replace the div entirely so that any styles associated with it are
        # also removed
        c = self.container
        c.removeChild(self.grid)
        c.insertBefore(E.div(), c.lastChild)
        self.shown_book_ids.clear()
        self.init_grid()

    def render_id(self, book_id):
        l = self.shown_book_ids.length
        self.shown_book_ids.add(book_id)
        if l < self.shown_book_ids.length:
            return self.render_book(book_id)

    def render_ids(self, book_ids):
        book_ids = book_ids or self.interface_data['search_result']['book_ids']
        div = self.grid
        for book_id in book_ids:
            child = self.render_id(book_id)
            if child is not None:
                div.appendChild(self.render_book(book_id))

    def update_fetching_status(self):
        c = self.container
        more = c.lastChild
        if self.is_fetching is not None:
            more.firstChild.style.display = 'none'
            more.lastChild.style.display = 'block'
        elif self.interface_data['search_result']['total_num'] > self.shown_book_ids.length:
            more.firstChild.style.display = 'block'
            more.lastChild.style.display = 'none'
        else:
            more.firstChild.style.display = 'none'
            more.lastChild.style.display = 'none'

    def get_more_books(self):
        data = {'offset':self.shown_book_ids.length}
        for key in 'query', 'sort', 'sort_order':
            data[key] = self.interface_data['search_result'][key]
        self.is_fetching = ajax_send('interface-data/more-books', data, self.got_more_books.bind(self),
                                     query={'library_id':self.interface_data.library_id})
        self.update_fetching_status()

    def abort_get_more_books(self):
        if self.is_fetching:
            a, self.is_fetching = self.is_fetching, None
            a.abort()
            self.update_fetching_status()

    def got_more_books(self, end_type, xhr, event):
        if self.is_fetching is None or self.is_fetching is not xhr:
            return  # Fetching was aborted
        self.is_fetching = None
        self.update_fetching_status()
        if end_type == 'load':
            try:
                data = JSON.parse(xhr.responseText)
                for key in data.metadata:
                    self.interface_data.metadata[key] = data.metadata[key]
                if not data.search_result.book_ids:
                    raise Exception('No books ids object in search result from server')
                self.render_ids(data.search_result.book_ids)
                self.interface_data.search_result = data.search_result
            except Exception as err:
                error_dialog(_('Could not get more books'), _('Server returned an invalid response'), err.stack or err.toString())
        elif end_type != 'abort':
            error_dialog(_('Could not get more books'), xhr.error_html)

    # Cover grid {{{

    def init_cover_grid(self):
        div = self.grid
        set_css(div, display='flex', flex_wrap='wrap', justify_content='flex-start', align_items='flex-end', align_content='flex-start', user_select='none')
        div.setAttribute('class', 'cover_grid')

    def cover_grid_item(self, book_id):
        cover_url = str.format('get/thumb/{}/{}?sz={}x{}', book_id, self.interface_data['library_id'], THUMBNAIL_MAX_WIDTH, THUMBNAIL_MAX_HEIGHT)
        metadata = self.interface_data['metadata'][book_id]
        alt = str.format(_('{} by {}'), metadata['title'], metadata['authors'].join(' & '))
        img = E.img(src=cover_url, alt=alt, title=alt, data_title=metadata['title'], data_authors=metadata['authors'].join(' & '),
                style='max-width: 100%; max-height: 100%; display: block; width:auto; height:auto')
        img.onerror = def(err):
            img = err.target
            div = img.parentNode
            if not div:
                return
            clear(div)
            div.appendChild(E.div(
                style='position:relative; top:-50%; transform: translateY(50%)',
                E.h2(img.getAttribute('data-title'), style='text-align:center; font-size:larger; font-weight: bold'),
                E.div(_('by'), style='text-align: center'),
                E.h2(img.getAttribute('data-authors'), style='text-align:center; font-size:larger; font-weight: bold')
            ))
            set_css(div, border='dashed 1px currentColor', border_radius='10px')

        return E.div(
            style=str.format(('margin: 10px; display: flex; align-content: flex-end; align-items: flex-end; justify-content: space-around;'
                              'width: 21vw; height: 28vw; max-width: {}px; max-height: {}px; min-width: {}px; min-height: {}px; cursor:pointer'),
                             THUMBNAIL_MAX_WIDTH, THUMBNAIL_MAX_HEIGHT, THUMBNAIL_MAX_WIDTH // 2, THUMBNAIL_MAX_HEIGHT // 2),
            data_book_id=str(book_id),
            img
        )

    # }}}

    def sort_panel_data(self, create_item):
        current_sorted_field = str.partition(self.interface_data.search_result.sort, ',')[0]
        current_sorted_field_order = str.partition(self.interface_data.search_result.sort_order, ',')[0]
        new_sort_order = 'desc' if current_sorted_field_order == 'asc' else 'asc'
        if current_sorted_field == 'date':
            current_sorted_field = 'timestamp'
        ans = []
        ans.subtitle = _('Change how the list of books is sorted')
        for field, name in self.interface_data.sortable_fields:
            subtitle = icon_name = None
            if field == current_sorted_field:
                subtitle = _('Reverse current sort order')
                icon_name = 'sort-amount-asc' if current_sorted_field_order == 'asc' else 'sort-amount-desc'
                action = self.change_sort.bind(self, field, new_sort_order)
            else:
                action = self.change_sort.bind(self, field, None)
            ans.push(create_item(name, subtitle=subtitle, icon_name=icon_name, action=action))
        return ans

    def change_sort(self, field, order):
        self.abort_get_more_books()
        key = 'sort-order-for-' + field
        sd = get_session_data()
        order = order or sd.get(key, 'asc')
        order = 'asc' if order == 'asc' else 'desc'
        sd.set(key, order)
        sr = self.interface_data.search_result
        sort = field + '.' + order + ',' + sr.sort + '.' + sr.order
        data = {'search':sr.query or '', 'sort':sort, 'num':self.shown_book_ids.length, 'library_id':self.interface_data.library_id}
        ajax_progress_dialog('interface-data/get-books', self.sort_change_completed.bind(self), _(
            'Fetching data from server, please wait') + '…', query=data)

    def sort_change_completed(self, end_type, xhr, ev):
        if end_type == 'load':
            boss = get_boss()
            try:
                data = JSON.parse(xhr.responseText)
                boss.change_books(data)
            except Exception as err:
                return error_dialog(_('Could not change sort order'), err + '', details=err.stack)
            boss.ui.close_panel()
            window.scrollTo(0, 0)
        elif end_type != 'abort':
            error_dialog(_('Could not change sort order'), xhr.error_html)

    def change_search(self, query):
        self.abort_get_more_books()
        query = query or ''
        sd = get_session_data()
        data = {'search':query, 'sort':sd.get('sort'), 'library_id':self.interface_data.library_id}
        ajax_progress_dialog('interface-data/get-books', self.search_change_completed.bind(self), _(
            'Fetching data from server, please wait') + '…', query=data)

    def search_change_completed(self, end_type, xhr, ev):
        if end_type == 'load':
            boss = get_boss()
            try:
                data = JSON.parse(xhr.responseText)
                boss.change_books(data)
            except Exception as err:
                return error_dialog(_('Could not change search query'), err + '', details=err.stack)
            query = {'search':self.interface_data.search_result.query, 'library_id':self.interface_data.library_id}
            window.history.pushState(None, '', encode_query(query))
            boss.ui.close_panel()
            self.update_fetching_status()
            window.scrollTo(0, 0)
        elif end_type != 'abort':
            msg = xhr.error_html
            if xhr.status == 400 and str.startswith(xhr.responseText, 'Invalid search expression:'):
                msg = _('The search expression could not be parsed: ') + xhr.responseText
            error_dialog(_('Could not change search query'), msg)

    def refresh(self):
        self.clear()
        self.render_ids()
