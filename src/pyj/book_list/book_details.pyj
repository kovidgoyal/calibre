# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals

import traceback
from ajax import ajax
from book_list.theme import get_font_size
from dom import clear, build_rule, svgicon, add_extra_css
from elementmaker import E
from gettext import gettext as _
from modals import error_dialog, create_custom_dialog
from widgets import create_spinner, create_button
from date import format_date
from session import get_interface_data
from utils import fmt_sidx, parse_url_params, conditional_timeout

from book_list.router import back, open_book, home
from book_list.library_data import book_metadata, cover_url, set_book_metadata, current_library_id, library_data, download_url, load_status, current_virtual_library
from book_list.top_bar import create_top_bar, set_title, add_button
from book_list.ui import set_panel_handler
from book_list.views import search

bd_counter = 0

FORMAT_PRIORITIES = [
    'EPUB', 'AZW3', 'DOCX', 'LIT', 'MOBI', 'ODT', 'RTF', 'MD', 'MARKDOWN', 'TXT', 'PDF'
]

def sort_formats_key(fmt):
    ans = FORMAT_PRIORITIES.indexOf(fmt)
    if ans < 0:
        ans = FORMAT_PRIORITIES.length
    return ans

def get_preferred_format(metadata, output_format, input_formats):
    formats = (metadata and metadata.formats) or v'[]'
    formats = [f.toUpperCase() for f in formats]
    fmt = 'EPUB' if output_format is 'PDF' else output_format
    if formats.length and formats.indexOf(fmt) is -1:
        for q in sorted(formats, key=sort_formats_key):
            if input_formats[q]:
                fmt = q
                break
    return fmt.toUpperCase()

IGNORED_FIELDS = {'title', 'sort', 'uuid', 'id', 'urls_from_identifiers', 'lang_names', 'last_modified'}

default_sort = {f:i+1 for i, f in enumerate(('title', 'title_sort', 'authors', 'author_sort', 'series', 'rating', 'pubdate', 'tags', 'timestamp', 'pubdate', 'identifiers', 'languages', 'publisher', 'last_modified'))}
default_sort['formats'] = 999

def field_sorter(field_metadata):
    return def(field):
        lvl = '{:03d}'.format(default_sort[field] or 998)
        fm = (field_metadata[field] or {})[field] or {}
        return lvl + (fm.name or 'zzzzz')


def execute_search(ev):
    name, val = JSON.parse(ev.currentTarget.dataset.search)
    query = '{}:"={}"'.format(name, str.replace(val, '"', r'\"'))
    search(query)


def on_fmt_click(ev):
    fmt = ev.currentTarget.dataset.format
    book_id = int(ev.currentTarget.dataset.bookId)
    title = this

    create_custom_dialog(title, def(parent, close_modal):

        def action(which):
            close_modal()
            which(book_id, fmt)

        parent.appendChild(E.div(
            E.div(_('What would you like to do with the {} format?').format(fmt)),
            E.div(style='margin:1ex auto; overflow: hidden; padding: 1em 1.5em; text-align: center',
                create_button(_('Read {}').format(fmt), 'book', action.bind(None, read_format)),
                '\xa0',
                create_button(_('Download {}').format(fmt), 'cloud-download', action.bind(None, download_format)),
            )
        ))
    )


def render_metadata(mi, table, book_id, field_list=None):  # {{{
    field_metadata = library_data.field_metadata
    interface_data = get_interface_data()
    def allowed_fields(field):
        if field.endswith('_index'):
            fm = field_metadata[field[:-len('_index')]]
            if fm and fm.datatype is 'series':
                return False
        if field.startswith('#'):
            return True
        if field in IGNORED_FIELDS or field.endswith('_sort'):
            return False
        return True

    fields = field_list or sorted(filter(allowed_fields, mi), key=field_sorter(field_metadata))
    comments = {}

    def add_row(name, val, is_searchable=False, is_html=False, join=None):
        def add_val(v):
            if not v.appendChild:
                v += ''
            if is_searchable:
                table.lastChild.lastChild.appendChild(E.a(
                    data_search=JSON.stringify([is_searchable, v]), onclick=execute_search,
                    title=_('Click to see books with {0}: {1}').format(name, v), href='javascript: void(0)', v))
            else:
                if v.appendChild:
                    table.lastChild.lastChild.appendChild(v)
                else:
                    table.lastChild.lastChild.appendChild(document.createTextNode(v))

        table.appendChild(E.tr(E.td(name + ':'), E.td()))
        if is_html:
            table.lastChild.lastChild.innerHTML = val + ''
        else:
            if not join:
                add_val(val)
            else:
                for v in val:
                    add_val(v)
                    if v is not val[-1]:
                        table.lastChild.lastChild.appendChild(document.createTextNode(join))

    def process_composite(field, fm, name, val):
        if fm.display and fm.display.contains_html:
            add_row(name, val, is_html=True)
            return
        if fm.is_multiple and fm.is_multiple.list_to_ui:
            all_vals = filter(None, map(str.strip, val.split(fm.is_multiple.list_to_ui)))
            add_row(name, all_vals, is_searchable=field, join=fm.is_multiple.list_to_ui)
        else:
            add_row(name, val, is_searchable=field)

    def process_authors(field, fm, name, val):
        add_row(name, val, is_searchable=field, join=' & ')

    def process_publisher(field, fm, name, val):
        add_row(name, val, is_searchable=field)

    def process_formats(field, fm, name, val):
        table.appendChild(E.tr(E.td(name + ':'), E.td()))
        td = table.lastChild.lastChild
        for fmt in val:
            fmt = fmt.toUpperCase()
            td.appendChild(E.a(
                fmt, class_='simple-link', href='javascript:void(0)',
                title=_('Read or download this book in the {} format').format(fmt),
                onclick=on_fmt_click.bind(mi.title), data_format=fmt, data_book_id='' + book_id))
            if fmt is not val[-1]:
                td.appendChild(document.createTextNode(', '))

    def process_rating(field, fm, name, val):
        stars = E.span()
        val = int(val)
        for i in range(val // 2):
            stars.appendChild(svgicon('star'))
        if fm.display.allow_half_stars and (val % 2):
            stars.appendChild(svgicon('star-half'))
        add_row(name, stars)

    def process_identifiers(field, fm, name, val):
        if val:
            keys = Object.keys(val)
            if keys.length:
                table.appendChild(E.tr(E.td(name + ':'), E.td()))
                url_map = {k:v'[text, url]' for text, k, val, url in mi.urls_from_identifiers or v'[]'}
                td = table.lastChild.lastChild
                for k in keys:
                    idval = val[k]
                    x = url_map[k]
                    if isinstance(x, list) and x.length is 2:
                        td.appendChild(E.a(title='{}:{}'.format(k, idval), target='_new', href=x[1], x[0]))
                    else:
                        td.appendChild(E.span(k, ':', idval))
                    if k is not keys[-1]:
                        td.appendChild(document.createTextNode(', '))

    def process_languages(field, fm, name, val):
        if val and val.length:
            table.appendChild(E.tr(E.td(name + ':'), E.td()))
            td = table.lastChild.lastChild
            for k in val:
                lang = mi.lang_names[k] or k
                td.appendChild(E.a(lang,
                    title=_('Click to see books with language: {}').format(lang), href='javascript: void(0)',
                    data_search=JSON.stringify([field, k]), onclick=execute_search
                ))
                if k is not val[-1]:
                    td.appendChild(document.createTextNode(', '))

    def process_datetime(field, fm, name, val):
        if val:
            fmt = interface_data['gui_' + field + '_display_format'] or (fm['display'] or {}).date_format
            add_row(name, format_date(val, fmt))

    def process_series(field, fm, name, val):
        if val:
            ifield = field + '_index'
            try:
                ival = float(mi[ifield])
            except Exception:
                ival = 1.0
            ival = fmt_sidx(ival, use_roman=interface_data.use_roman_numerals_for_series_number)
            table.appendChild(E.tr(E.td(name + ':'), E.td()))
            table.lastChild.lastChild.appendChild(E.span(ival, _(' of '), E.a(
                data_search=JSON.stringify([field, val]), onclick=execute_search,
                title=_('Click to see books with {0}: {1}').format(name, val), href='javascript: void(0)', val)))

    def process_field(field, fm):
        name = fm.name or field
        datatype = fm.datatype
        val = mi[field]
        if field is 'comments' or datatype is 'comments':
            if fm.display?.heading_position is 'side':
                add_row(name, val, is_html=True)
            else:
                comments[field] = val
            return
        func = None
        if datatype is 'composite':
            func = process_composite
        elif field is 'formats':
            func = process_formats
        elif datatype is 'rating':
            func = process_rating
        elif field is 'identifiers':
            func = process_identifiers
        elif field is 'authors':
            func = process_authors
        elif field is 'publisher':
            func = process_publisher
        elif field is 'languages':
            func = process_languages
        elif datatype is 'datetime':
            func = process_datetime
        elif datatype is 'series':
            func = process_series
        if func:
            func(field, fm, name, val)
        else:
            if datatype is 'text' or datatype is 'enumeration':
                join = fm.is_multiple.list_to_ui if fm.is_multiple else None
                add_row(name, val, join=join, is_searchable=field)
            elif datatype is 'bool':
                add_row(name, _('Yes') if val else _('No'))
            elif datatype is 'int' or datatype is 'float':
                fmt = (fm.display or {}).number_format
                if fmt:
                    val = fmt.format(val)
                else:
                    val += ''
                add_row(name, val)

    for field in fields:
        fm = field_metadata[field]
        if not fm:
            continue
        try:
            process_field(field, fm)
        except Exception:
            print('Failed to render metadata field: ' + field)
            traceback.print_exc()

    for i, field in enumerate(sorted(comments)):
        fm = field_metadata[field]
        comment = comments[field]
        div = E.div()
        div.innerHTML = comment
        if fm.display?.heading_position is 'above':
            name = fm.name or field
            div.insertBefore(E.h3(name), div.firstChild or None)
        table.parentNode.appendChild(div)
        if i is 0:
            div.style.marginTop = '2ex'
# }}}

CLASS_NAME = 'book-details-panel'

add_extra_css(def():
    sel = '.' + CLASS_NAME + ' '
    style  = build_rule(sel + 'table.metadata td:first-of-type', font_weight='bold', padding_right='1em', white_space='nowrap')
    style += build_rule(sel + 'table.metadata a[href]', color='blue')
    style += build_rule(sel + 'table.metadata a[href]:hover', color='red')
    style += build_rule(sel + 'table.metadata a[href]:active', color='red', transform='scale(1.5)')
    return style
)

current_fetch = None

def no_book(container):
    container.appendChild(E.div(
        style='margin: 1ex 1em',
        _('No book found')
    ))


def on_img_err(err):
    img = err.target
    if img.parentNode:
        img.parentNode.style.display = 'none'

def preferred_format(book_id):
    interface_data = get_interface_data()
    return get_preferred_format(book_metadata(book_id), interface_data.output_format, interface_data.input_formats)


def read_format(book_id, fmt):
    open_book(book_id, fmt)


def read_book(book_id):
    fmt = preferred_format(book_id)
    read_format(book_id, fmt)


def download_format(book_id, fmt):
    window.location = download_url(book_id, fmt)


def download_book(book_id):
    fmt = preferred_format(book_id)
    download_format(book_id, fmt)


def render_book(container_id, book_id):
    c = document.getElementById(container_id)
    if not c:
        return
    metadata = book_metadata(book_id)
    set_title(c, metadata.title)
    alt = _('{} by {}').format(metadata.title, metadata.authors.join(' & '))
    imgdiv = E.div(
        E.img(
            alt=alt, title=alt, data_title=metadata.title, data_authors=metadata.authors.join(' & '),
            style='border-radius: 20px; max-width: calc(100vw - 2em); max-height: calc(100vh - 4ex - {}); display: block; width:auto; height:auto; border-radius: 20px'.format(get_font_size('title')
        ))
    )
    imgdiv.firstChild.onerror = on_img_err
    imgdiv.firstChild.src = cover_url(book_id)
    c = c.lastChild
    c.appendChild(E.div(
        style='display:flex; padding: 1ex 1em; align-items: flex-start; justify-content: flex-start; flex-wrap: wrap',
        E.div(style='margin-right: 1em; flex-grow: 3; max-width: 500px', data_book_id='' + book_id),
        imgdiv
    ))
    container = c.lastChild.firstChild
    read_button = create_button(_('Read'), 'book', read_book.bind(None, book_id), _('Read this book'))
    fmt = preferred_format(book_id)
    download_button = create_button(_('Download'), 'cloud-download', download_url(book_id, fmt),
        _('Download this book in the {} format').format(fmt), download_filename=f'{metadata.title}.{fmt.toLowerCase()}')
    row = E.div(read_button, '\xa0\xa0\xa0', download_button, style='margin-bottom: 1ex')
    if not metadata.formats or not metadata.formats.length:
        row.style.display = 'none'
    container.appendChild(row)
    md = E.div(style='margin-bottom: 2ex')
    table = E.table(class_='metadata')
    container.appendChild(md)
    md.appendChild(table)
    render_metadata(metadata, table, book_id)


def metadata_fetched(container_id, book_id, end_type, xhr, event):
    nonlocal current_fetch
    if current_fetch is None or current_fetch is not xhr:
        return  # Fetching was aborted
    current_fetch = None
    c = document.getElementById(container_id)
    if not c:
        return
    c = c.lastChild
    if end_type is 'load':
        try:
            data = JSON.parse(xhr.responseText)
        except Exception as err:
            error_dialog(_('Could not fetch metadata for book'), _('Server returned an invalid response'), err.toString())
            return
        clear(c)
        book_id = int(data['id'])
        set_book_metadata(book_id, data)
        render_book(container_id, book_id)
    elif end_type is not 'abort':
        clear(c)
        c.appendChild(E.div(
            style='margin: 1ex 1em',
            _('Could not fetch metadata for book'),
            E.div(style='margin: 1ex 1em')
        ))
        c.lastChild.lastChild.innerHTML = xhr.error_html

def fetch_metadata(container_id, book_id):
    nonlocal current_fetch
    container = document.getElementById(container_id)
    if not container:
        return
    if current_fetch:
        current_fetch.abort()
    current_fetch = ajax('interface-data/book-metadata/' + book_id, metadata_fetched.bind(None, container_id, book_id),
                         query={'library_id':current_library_id(), 'vl':current_virtual_library()})
    current_fetch.send()
    container = container.lastChild
    clear(container)
    container.appendChild(E.div(
        style='margin: 1ex 1em',
        create_spinner(), '\xa0' + _('Fetching metadata for the book, please wait') + '…',
    ))


def create_book_details(container):
    q = parse_url_params()
    current_book_id = q.book_id
    if current_book_id is undefined or current_book_id is None:
        no_book(container)
        return
    current_book_id = int(current_book_id)
    container_id = container.parentNode.id
    if current_book_id is not 0 and book_metadata(current_book_id):
        render_book(container_id, current_book_id)
    else:
        if current_book_id is 0:
            add_button(container, 'random', def(): fetch_metadata(container_id, 0);)
        fetch_metadata(container_id, current_book_id)


def check_for_books_loaded():
    container = this
    if load_status.loading:
        conditional_timeout(container.id, 5, check_for_books_loaded)
        return
    container = container.lastChild
    clear(container)
    if not load_status.ok:
        err = E.div()
        err.innerHTML = load_status.error_html
        container.appendChild(E.div(
            style='margin: 1ex 1em',
            E.div(_('Failed to load books from calibre library, with error:')),
            err,
            E.div(
                style='margin-top: 1em; border-top: solid 1px currentColor; padding-top: 1ex;',
                E.a(onclick=def(): home(replace=True);, href='javascript: void(0)', style='color: blue', _('Go back to the home page')))
            ),
        )
        return
    create_book_details(container)


def init(container_id):
    container = document.getElementById(container_id)
    create_top_bar(container, title=_('Book details'), action=back, icon='close')
    container.appendChild(E.div(class_=CLASS_NAME))
    container.lastChild.appendChild(E.div(_('Loading books from the calibre library, please wait...'), style='margin: 1ex 1em'))
    conditional_timeout(container_id, 5, check_for_books_loaded)


set_panel_handler('book_details', init)
