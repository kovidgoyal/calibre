# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2017, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from ajax import ajax
from lru_cache import LRUCache
from session import get_interface_data
from utils import parse_url_params

from book_list.globals import get_session_data

load_status = {'loading':True, 'ok':False, 'error_html':None, 'current_fetch': None}
library_data = {'metadata':{}}


def current_library_id():
    q = parse_url_params()
    return q.library_id or get_interface_data().default_library_id


def current_virtual_library():
    q = parse_url_params()
    return q.vl or ''


def url_books_query(sd):
    q = parse_url_params()
    sd = sd or get_session_data()
    lid = current_library_id()
    return {
        'library_id': lid,
        'sort': q.sort or sd.get_library_option(lid, 'sort'),
        'search': q.search,
        'vl': current_virtual_library(),
    }


def loaded_books_query():
    sr = library_data.search_result
    sort = None
    if sr:
        sort = [s + '.' + o for s, o in zip(sr.sort.split(','), sr.sort_order.split(','))].join(',')
    return {
        'library_id': sr.library_id if sr else None,
        'sort': sort,
        'search': sr?.query,
        'vl':sr?.vl
    }


def current_sorted_field():
    if library_data.search_result:
        return library_data.search_result.sort, library_data.search_result.sort_order
    sort = url_books_query().sort.partition(',')[0]
    csf = sort.partition('.')[0]
    csfo = sort.partition('.')[2] or 'asc'
    return csf, csfo


def update_library_data(data):
    load_status.loading = False
    load_status.ok = True
    load_status.error_html = None
    for key in 'search_result sortable_fields field_metadata metadata'.split(' '):
        library_data[key] = data[key]


def on_data_loaded(end_type, xhr, ev):
    load_status.current_fetch = None
    if end_type is 'load':
        data = JSON.parse(xhr.responseText)
        update_library_data(data)
        sd = get_session_data()
        q = loaded_books_query()
        sd.set_library_option(q.library_id, 'sort', q.sort)
    elif end_type is 'abort':
        pass
    else:
        load_status.ok = False
        load_status.loading = False
        load_status.error_html = xhr.error_html


def fetch_init_data():
    if load_status.current_fetch:
        load_status.current_fetch.abort()
    query = url_books_query()
    load_status.loading = True
    load_status.ok = False
    load_status.error_html = None
    load_status.current_fetch = ajax('interface-data/books-init', on_data_loaded, query=query)
    load_status.current_fetch.send()


def thumbnail_url(book_id, width, height):
    return 'get/thumb/{}/{}?sz={}x{}'.format(book_id, loaded_books_query().library_id, Math.ceil(width * window.devicePixelRatio), Math.ceil(height * window.devicePixelRatio))


def cover_url(book_id):
    lid = current_library_id()
    return f'get/cover/{book_id}/{lid}'


def download_url(book_id, fmt):
    lid = current_library_id()
    return f'get/{fmt}/{book_id}/{lid}'


def book_metadata(book_id):
    return library_data.metadata[book_id]


def set_book_metadata(book_id, value):
    library_data.metadata[book_id] = value


def ensure_current_library_data():
    q = url_books_query()
    loaded = loaded_books_query()
    matches = True

    def is_same(a, b):
        if not a and not b:
            return True
        return a is b

    for key in q:
        if not is_same(q[key], loaded[key]):
            matches = False
            break
    if not matches:
        fetch_init_data()


class ThumbnailCache:

    # Cache to prevent browser from issuing HTTP requests when thumbnails pages
    # are destroyed/rebuilt.

    def __init__(self, size=250):
        self.cache = LRUCache(size)

    def get(self, book_id, width, height, callback):
        url = thumbnail_url(book_id, width, height)
        item = self.cache.get(url)
        if not item:
            img = new Image()
            item = {'img':img, 'load_type':None, 'callbacks':v'[callback]'}
            img.onerror = self.load_finished.bind(None, item, 'error')
            img.onload = self.load_finished.bind(None, item, 'load')
            img.onabort = self.load_finished.bind(None, item, 'abort')
            img.dataset.bookId = str(book_id)
            img.src = url
            self.cache.set(url, item)
            return img
        if item.load_type is None:
            if item.callbacks.indexOf(callback) < 0:
                item.callbacks.push(callback)
        else:
            callback(item.img, item.load_type)
        return item.img

    def load_finished(self, item, load_type):
        item.load_type = load_type
        img = item.img
        img.onload = img.onerror = img.onabort = None
        for callback in item.callbacks:
            callback(img, load_type)

thumbnail_cache = ThumbnailCache()


def sync_library_books(library_id, to_sync, callback):
    url = f'book-get-last-read-position/{library_id}/'
    which = v'[]'
    lrmap = {}
    for key, last_read in to_sync:
        library_id, book_id, fmt = key
        fmt = fmt.upper()
        which.push(f'{book_id}-{fmt}')
        lrmap[f'{book_id}:{fmt}'] = last_read
    url += which.join('_')
    ajax(url, callback.bind(None, library_id, lrmap)).send()
