# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

from dom import set_css
from elementmaker import E
from modals import error_dialog, create_modal_container
from gettext import gettext as _
from widgets import get_widget_css
from utils import parse_url_params

from book_list.globals import get_session_data
from book_list.theme import get_color
from book_list.ui import UI

class Boss:

    def __init__(self, interface_data):
        document.head.appendChild(E.style(get_widget_css()))
        set_css(document.body, background_color=get_color('window-background'), color=get_color('window-foreground'))
        create_modal_container()
        self.interface_data = interface_data
        self.current_library_id = interface_data['default_library']
        self.current_library_name = interface_data['library_map'][self.current_library_id]
        self.update_window_title()
        div = E.div(id='book-list-container')
        document.body.appendChild(div)
        self.ui = UI(interface_data, div)
        window.onerror = self.onerror.bind(self)
        setTimeout(def():
            window.onpopstate = self.onpopstate.bind(self)
        , 0)  # We do this after event loop ticks over to avoid catching popstate events that some browsers send on page load

    def update_window_title(self):
        document.title = 'calibre :: ' + self.current_library_name

    def onerror(self, msg, script_url, line_number, column_number, error_object):
        try:
            fname = str.rpartition(script_url, '/')[-1] or script_url
            msg = msg + '<br><span style="font-size:smaller">' + str.format('Error at {}:{}:{}', fname, line_number, column_number or '') + '</span>'
            details = ''
            if error_object and error_object.stack:
                details = error_object.stack
            error_dialog(_('Unhandled error'), msg, details)
            return True
        except:
            console.error('There was an error in the unhandled exception handler')

    def onpopstate(self, ev):
        data = parse_url_params()
        if not data.mode or data.mode == 'book_list':
            search = data.search or ''
            if search != self.ui.books_view.interface_data.search_result.query:
                self.ui.books_view.change_search(search)

    def change_books(self, data):
        data.search_result.sort = str.split(data.search_result.sort, ',')[:2].join(',')
        data.search_result.sort_order = str.split(data.search_result.sort_order, ',')[:2].join(',')
        sval = ''
        for field, order in zip(str.split(data.search_result.sort, ','), str.split(data.search_result.sort_order, ',')):
            sval += field + '.' + order + ','
        get_session_data().set('sort', str.rstrip(sval, ','))
        self.interface_data.metadata = data.metadata
        self.interface_data.search_result = data.search_result
        self.ui.refresh_books_view()
