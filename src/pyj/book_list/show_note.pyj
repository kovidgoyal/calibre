# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2023, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from ajax import ajax
from book_list.details_list import sandbox_css
from book_list.router import back, home
from book_list.top_bar import create_top_bar
from book_list.ui import set_panel_handler
from gettext import gettext as _
from utils import parse_url_params, sandboxed_html


def make_iframe(html):
    iframe = sandboxed_html(html, sandbox_css() + '\n\nhtml { overflow: visible; margin: 0.5rem; }')
    iframe.style.width = '100%'
    iframe.style.flexGrow = '10'
    return iframe


current_note_markup = None


def on_notes_fetched(load_type, xhr, ev):
    nonlocal current_note_markup
    q = parse_url_params()
    if load_type is 'load':
        html = xhr.responseText
        q.html = xhr.responseText
        current_note_markup = q
    else:
        html = xhr.error_html
    iframe = make_iframe(html)
    container = document.getElementById(this)
    old = container.querySelector('div.loading')
    p = old.parentNode
    p.removeChild(old)
    if q.panel is 'show_note':
        p.appendChild(iframe)
    elif q.panel is 'edit_note':
        create_editor(container, current_note_markup.html)


def init(container_id):
    container = document.getElementById(container_id)
    close_action, close_icon = back, 'close'
    q = parse_url_params()
    ca = q.close_action
    if ca is 'home':
        close_action, close_icon = def(): home();, 'home'
    create_top_bar(container, title=q.item, action=close_action, icon=close_icon)
    container.style.height = '100vh'
    container.style.display = 'flex'
    container.style.flexDirection = 'column'
    if current_note_markup and current_note_markup.library_id is q.library_id and current_note_markup.field is q.field and current_note_markup.item_id is q.item_id:
        html = current_note_markup.html
        container.appendChild(make_iframe(html))
    else:
        container.appendChild(E.div(_('Loading') +  '…', style='margin: 0.5rem', class_='loading'))
        url = 'get-note/' + encodeURIComponent(q.field) + '/' + encodeURIComponent(q.item_id)
        if q.library_id:
            url += '/' + encodeURIComponent(q.library_id)
        ajax(url, on_notes_fetched.bind(container_id), bypass_cache=False).send()


def init_edit(container_id):
    container = document.getElementById(container_id)
    close_action, close_icon = back, 'close'
    q = parse_url_params()
    ca = q.close_action
    if ca is 'home':
        close_action, close_icon = def(): home();, 'home'
    create_top_bar(container, title=_('Edit notes for:') + ' ' + q.item, action=close_action, icon=close_icon)
    container.style.height = '100vh'
    container.style.display = 'flex'
    container.style.flexDirection = 'column'
    if current_note_markup and current_note_markup.library_id is q.library_id and current_note_markup.field is q.field and current_note_markup.item_id is q.item_id:
        create_editor(container, current_note_markup.html)
    else:
        container.appendChild(E.div(_('Loading') +  '…', style='margin: 0.5rem', class_='loading'))
        url = 'get-note/' + encodeURIComponent(q.field) + '/' + encodeURIComponent(q.item_id)
        if q.library_id:
            url += '/' + encodeURIComponent(q.library_id)
        ajax(url, on_notes_fetched.bind(container_id), bypass_cache=False).send()


def create_editor(container, html):
    pass


set_panel_handler('show_note', init)
set_panel_handler('edit_note', init_edit)
