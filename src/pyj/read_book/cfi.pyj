# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals

#  Based on code originally written by Peter Sorotkin
#  http://code.google.com/p/epub-revision/source/browse/trunk/src/samples/cfi/epubcfi.js
#
#  Improvements with respect to that code:
#  1. Works on all browsers (WebKit, Firefox and IE >= 9)
#  2. Works for content in elements that are scrollable (i.e. have their own scrollbars)
#  3. Much more comprehensive testing/error handling
#  4. Properly encodes/decodes assertions
#  5. Handles points in the padding of elements consistently
#  6. Has a utility method to calculate the CFI for the current viewport position robustly
#
#  Tested on: Firefox 9, IE 9, Chromium 16, Qt WebKit 2.1
#  The main entry points are:
#    at(x, y): Maps a point to a CFI, if possible
#    at_current(): Returns the CFI corresponding to the current viewport scroll location
#
#    scroll_to(cfi): which scrolls the browser to a point corresponding to the
#                    given cfi, and returns the x and y co-ordinates of the point.

from read_book.viewport import scroll_viewport

# CFI escaping {{{
escape_pat = /[\[\],^();~@!-]/g
unescape_pat = /[\^](.)/g

def escape_for_cfi(raw):
    return (raw or '').replace(escape_pat, '^$&')

def unescape_from_cfi(raw):
    return (raw or '').replace(unescape_pat, '$1')
# }}}

def fstr(d):  # {{{
    # Convert a timestamp floating point number to a string
    ans = ''
    if d < 0:
        ans = '-'
        d = -d
    n = Math.floor(d)
    ans += n
    n = Math.round((d-n)*100)
    if n is not 0:
        ans += "." + (n/10 if (n % 10 is 0) else n)
    return ans
# }}}

def get_current_time(target): # {{{
    return fstr(target.currentTime or 0)
# }}}

def window_scroll_pos(w):  # {{{
    w = w or window
    return w.pageXOffset, w.pageYOffset
# }}}

# Convert point to character offset {{{
def range_has_point(range_, x, y):
    rects = range_.getClientRects()
    for v'var i = 0; i < rects.length; i++':
        rect = rects[i]
        if (rect.left <= x <= rect.right) and (rect.top <= y <= rect.bottom):
            return True
    return False

def offset_in_text_node(node, range_, x, y):
    limits = v'[0, node.nodeValue.length]'
    while limits[0] is not limits[1]:
        pivot = Math.floor( (limits[0] + limits[1]) / 2 )
        lr = v'[limits[0], pivot]'
        rr = v'[pivot+1, limits[1]]'
        range_.setStart(node, pivot)
        range_.setEnd(node, pivot+1)
        if range_has_point(range_, x, y):
            return pivot
        range_.setStart(node, rr[0])
        range_.setEnd(node, rr[1])
        if range_has_point(range_, x, y):
            limits = rr
            continue
        range_.setStart(node, lr[0])
        range_.setEnd(node, lr[1])
        if range_has_point(range_, x, y):
            limits = lr
            continue
        break
    return limits[0]

def find_offset_for_point(x, y, node, cdoc):
    range_ = cdoc.createRange()
    child = node.firstChild
    while child:
        if Node.TEXT_NODE <= child.nodeType <= Node.ENTITY_NODE and child.nodeValue and child.nodeValue.length:
            range_.setStart(child, 0)
            range_.setEnd(child, child.nodeValue.length)
            if range_has_point(range_, x, y):
                return v'[child, offset_in_text_node(child, range_, x, y)]'
        child = child.nextSibling

    # The point must be after the last bit of text/in the padding/border, we dont know
    # how to get a good point in this case
    raise ValueError(str.format("Point ({}, {}) is in the padding/border of the node, so cannot calculate offset", x, y))

# }}}

def set_current_time(target, val):  # {{{
    if target.currentTime is undefined:
        return
    if target.readyState is 4 or target.readyState is "complete":
        target.currentTime = val + 0
    else:
        target.addEventListener("canplay", def(): target.currentTime = val;, False)
# }}}

# def encode(doc, node, offset, tail): {{{

def is_text_node(node):
    return node.nodeType is Node.TEXT_NODE or node.nodeType is Node.CDATA_SECTION_NODE


def text_length_in_range_wrapper(node):
    p = node.firstChild
    ans = 0
    while p:
        if is_text_node(p):
            ans += p.nodeValue.length
        elif p.nodeType is Node.ELEMENT_NODE and p.dataset.calibreRangeWrapper:
            ans += text_length_in_range_wrapper(p)
        p = p.nextSibling
    return ans


def adjust_node_for_text_offset(node):
    if node.parentNode and node.parentNode.dataset.calibreRangeWrapper:
        node = node.parentNode
    offset = 0
    adjusted = False
    while True:
        p = node.previousSibling
        if not p or p.nodeType > Node.COMMENT_NODE:
            break
        if is_text_node(p):
            offset += p.nodeValue.length
        elif p.nodeType is Node.ELEMENT_NODE and p.dataset.calibreRangeWrapper:
            offset += text_length_in_range_wrapper(p)
        node = p
        adjusted = True
    if adjusted and node.nodeType is Node.ELEMENT_NODE and node.dataset.calibreRangeWrapper:
        if not node.firstChild or node.firstChild.nodeType is not Node.TEXT_NODE:
            node.insertBefore(document.createTextNode(''), node.firstChild or None)
        node = node.firstChild
    return node, offset, adjusted


def unwrapped_nodes(range_wrapper):
    ans = v'[]'
    for child in range_wrapper.childNodes:
        if child.nodeType is Node.ELEMENT_NODE and child.dataset.calibreRangeWrapper:
            ans = ans.concat(unwrapped_nodes(child))
        else:
            ans.push(child)
    return ans


def increment_index_for_child(child, index, sentinel):
    is_element = child.nodeType is Node.ELEMENT_NODE
    if is_element and child.dataset.calibreRangeWrapper:
        nodes = unwrapped_nodes(child)
        index = increment_index_for_children(nodes, index, sentinel)
    else:
        index |= 1  # increment if even
        if is_element:
            index += 1
    return index


def increment_index_for_children(children, index, sentinel):
    for i in range(children.length):
        child = children[i]
        index = increment_index_for_child(child, index, sentinel)
        if child is sentinel:
            break
    return index


def non_range_wrapper_parent(node):
    p = node.parentNode
    while p.dataset?.calibreRangeWrapper:
        p = p.parentNode
    return p


def encode(doc, node, offset, tail):
    cfi = tail or ""
    # Handle the offset, if any
    if node.nodeType is Node.ELEMENT_NODE:
        if jstype(offset) is 'number':
            q = node.childNodes.item(offset)
            if q:
                if q.nodeType is Node.ELEMENT_NODE:
                    node = q
                    if node.dataset.calibreRangeWrapper:
                        if not node.firstChild:
                            node.appendChild(document.createTextNode(''))
                        node = node.firstChild
        elif node.dataset.calibreRangeWrapper:
            if not node.firstChild:
                node.appendChild(document.createTextNode(''))
            node = node.firstChild
    if is_text_node(node):
        offset = offset or 0
        adjusted_node, additional_offset, adjusted = adjust_node_for_text_offset(node)
        if adjusted:
            node = adjusted_node
            offset += additional_offset
        cfi = ":" + offset + cfi
    elif node.nodeType is not Node.ELEMENT_NODE: # Not handled
        print(f"Offsets for nodes of type {node.nodeType} are not handled")

    # Construct the path to node from root
    is_first = True
    while node is not doc:
        p = non_range_wrapper_parent(node)
        if not p:
            if node.nodeType == Node.DOCUMENT_NODE:  # Document node (iframe)
                win = node.defaultView
                if win.frameElement:
                    node = win.frameElement
                    cfi = "!" + cfi
                    continue
            break

        # Find position of node in parent
        index = increment_index_for_children(p.childNodes, 0, node)
        if is_first:
            is_first = False
            if node.nodeType is Node.ELEMENT_NODE and node.dataset.calibreRangeWrapper:
                index -= 1
        # Add id assertions for robustness where possible
        id = node.id
        idspec = ('[' + escape_for_cfi(id) + ']') if id else ''
        cfi = '/' + index + idspec + cfi
        node = p

    return cfi
# }}}

# def decode(cfi, doc):  {{{

def node_at_index(nodes, target, index, iter_text_nodes):
    for i in range(nodes.length):
        node = nodes[i]
        is_element = node.nodeType is Node.ELEMENT_NODE
        if is_element and node.dataset.calibreRangeWrapper:
            q, index = node_at_index(unwrapped_nodes(node), target, index, iter_text_nodes)
            if q:
                return q, index
            continue
        if (iter_text_nodes and not is_text_node(node)) or (not iter_text_nodes and not is_element):
            continue
        if index is target:
            return node, index
        index += 1
    return None, index


def node_for_path_step(parent, target, assertion):
    if assertion:
        q = document.getElementById(assertion)
        if q:
            return q
    is_element = target % 2 == 0
    target //= 2
    if is_element and target > 0:
        target -= 1
    return node_at_index(parent.childNodes, target, 0, not is_element)[0]


def node_for_text_offset(nodes, offset, forward, first_node):
    last_text_node = None
    seen_first = False
    for i in range(nodes.length):
        node = nodes[i]
        if not seen_first:
            if not first_node or node.isSameNode(first_node):
                seen_first = True
            else:
                continue
        if is_text_node(node):
            l = node.nodeValue.length
            if offset < l or (not forward and offset is l):
                return node, offset, True
            last_text_node = node
            offset -= l
        elif node.nodeType is Node.ELEMENT_NODE and node.dataset.calibreRangeWrapper:
            qn, offset, ok = node_for_text_offset(unwrapped_nodes(node), offset, forward)
            if ok:
                return qn, offset, True
    return last_text_node, offset, False


def decode(cfi, doc):
    doc = doc or window.document
    simple_node_regex = ///
        ^/(\d+)          # The node count
          (\[[^\]]*\])?  # The optional id assertion
    ///
    error = None
    node = doc

    while cfi.length > 0 and not error:
        r = cfi.match(simple_node_regex)
        if r: # Path step
            target = parseInt(r[1])
            assertion = r[2]
            if assertion:
                assertion = unescape_from_cfi(assertion.slice(1, assertion.length-1))
            q = node_for_path_step(node, target, assertion)
            if q:
                node = q
                cfi = cfi.substr(r[0].length)
            else:
                if target:
                    error = "No matching child found for CFI: " + cfi
                    break
                else:
                    cfi = cfi.substr(r[0].length)
        else if cfi[0] is '!': # Indirection
            if node.contentDocument:
                node = node.contentDocument
                cfi = cfi.substr(1)
            else:
                error = "Cannot reference " + node.nodeName + "'s content: " + cfi
        else:
            break

    if error:
        print(error)
        return None

    point = {}
    error = None
    offset = None

    r = cfi.match(/^:(\d+)/)
    if r:
        # Character offset
        offset = parseInt(r[1])
        cfi = cfi.substr(r[0].length)

    r = cfi.match(/^~(-?\d+(\.\d+)?)/)
    if r:
        # Temporal offset
        point.time = r[1] - 0 # Coerce to number
        cfi = cfi.substr(r[0].length)

    r = cfi.match(/^@(-?\d+(\.\d+)?):(-?\d+(\.\d+)?)/)
    if r:
        # Spatial offset
        point.x = r[1] - 0 # Coerce to number
        point.y = r[3] - 0 # Coerce to number
        cfi = cfi.substr(r[0].length)

    r = cfi.match(/^\[([^\]]+)\]/)
    if r:
        assertion = r[1]
        cfi = cfi.substr(r[0].length)
        r = assertion.match(/;s=([ab])$/)
        if r:
            if r.index > 0 and assertion[r.index - 1] is not '^':
                assertion = assertion.substr(0, r.index)
                point.forward = (r[1] is 'a')
            assertion = unescape_from_cfi(assertion)
            # TODO: Handle text assertion

    # Find the text node that contains the offset
    if offset is not None:
        orig_offset = offset
        if node.parentNode?.nodeType is Node.ELEMENT_NODE and node.parentNode.dataset.calibreRangeWrapper:
            node = node.parentNode
        node, offset, ok = node_for_text_offset(node.parentNode.childNodes, offset, point.forward, node)
        if not ok:
            error = "Offset out of range: " + orig_offset
        point.offset = offset

    point.node = node
    if error:
        point.error = error
    else if cfi.length > 0:
        point.error = "Undecoded CFI: " + cfi

    if point.error:
        print(point.error)

    return point
# }}}

def cfi_sort_key(cfi): # {{{
    simple_node_regex = ///
        ^/(\d+)          # The node count
          (\[[^\]]*\])?  # The optional id assertion
    ///
    steps = v'[]'

    while cfi.length > 0:
        r = cfi.match(simple_node_regex)
        if r: # Path step
            target = parseInt(r[1])
            cfi = cfi.substr(r[0].length)
            steps.push(target)
        else if cfi[0] is '!': # Indirection
            cfi = cfi.substr(1)
        else:
            break

    ans = {'steps': steps, 'text_offset': 0, 'temporal_offset': 0, 'spatial_offset': v'[0, 0]'}

    r = cfi.match(/^:(\d+)/)
    if r:
        # Character offset
        offset = parseInt(r[1])
        ans['text_offset'] = offset
        cfi = cfi.substr(r[0].length)

    r = cfi.match(/^~(-?\d+(\.\d+)?)/)
    if r:
        # Temporal offset
        ans['temporal_offset'] = r[1] - 0  # Coerce to number
        cfi = cfi.substr(r[0].length)

    r = cfi.match(/^@(-?\d+(\.\d+)?):(-?\d+(\.\d+)?)/)
    if r:
        # Spatial offset
        ans['spatial_offset'] = v'[r[1] - 0, r[3] - 0]'
        cfi = cfi.substr(r[0].length)
    return ans


def create_cfi_cmp(key_map):
    if not key_map:
        key_map = {}

    def cfi_cmp(a_cfi, b_cfi):
        a = key_map[a_cfi]
        if not a:
            a = key_map[a_cfi] = cfi_sort_key(a_cfi)
        b = key_map[b_cfi]
        if not b:
            b = key_map[b_cfi] = cfi_sort_key(b_cfi)
        for i in range(min(a.steps.length, b.steps.length)):
            diff = a.steps[i] - b.steps[i]
            if diff is not 0:
                return diff
        diff = a.length - b.length
        if diff is not 0:
            return diff

        if a.temporal_offset is not b.temporal_offset:
            return a.temporal_offset - b.temporal_offset

        if a.spatial_offset[0] is not b.spatial_offset[0]:
            return a.spatial_offset[0] - b.spatial_offset[0]
        if a.spatial_offset[1] is not b.spatial_offset[1]:
            return a.spatial_offset[1] - b.spatial_offset[1]

        if a.text_offset is not b.text_offset:
            return a.text_offset - b.text_offset

        return 0

    return cfi_cmp



def sort_cfis(array_of_cfis):
    key_map = {cfi: cfi_sort_key(cfi) for cfi in array_of_cfis}
    Array.prototype.sort.call(array_of_cfis, create_cfi_cmp(key_map))
# }}}

def at(x, y, doc):  # {{{
    # x, y are in viewport co-ordinates
    doc = doc or window.document
    cdoc = doc
    target = None
    tail = ''
    offset = None
    name = None

    # Drill down into iframes, etc.
    while True:
        target = cdoc.elementFromPoint(x, y)
        if not target or target is cdoc.documentElement or target is cdoc.body:
            # We ignore both html and body even though body could
            # have text nodes under it as performance is very poor if body
            # has large margins/padding (for e.g. in fullscreen mode)
            # A possible solution for this is to wrap all text node
            # children of body in <span> but that is seriously ugly and
            # might have side effects. Lets do this only if there are lots of
            # books in the wild that actually have text children of body,
            # and even in this case it might be better to change the input
            # plugin to prevent this from happening.
            # log("No element at (#{ x }, #{ y })")
            return None

        name = target.localName
        if name not in {'iframe', 'embed', 'object'}:
            break

        cd = target.contentDocument
        if not cd:
            break

        # We have an embedded document, transforms x, y into the co-prd
        # system of the embedded document's viewport
        rect = target.getBoundingClientRect()
        x -= rect.left
        y -= rect.top
        cdoc = cd

    (target.parentNode or target).normalize()

    if name in {'audio', 'video'}:
        tail = "~" + get_current_time(target)

    if name in {'img', 'video'}:
        rect = target.getBoundingClientRect()
        px = ((x - rect.left)*100)/target.offsetWidth
        py = ((y - rect.top)*100)/target.offsetHeight
        tail = str.format('{}@{}:{}', tail, fstr(px), fstr(py))
    else if name is not 'audio':
        # Get the text offset
        # We use a custom function instead of caretRangeFromPoint as
        # caretRangeFromPoint does weird things when the point falls in the
        # padding of the element
        target, offset = find_offset_for_point(x, y, target, cdoc)

    return encode(doc, target, offset, tail)
# }}}

def point(cfi, doc):  # {{{
    doc = doc or window.document
    r = decode(cfi, doc)
    if not r:
        return None
    node = r.node
    ndoc = node.ownerDocument
    if not ndoc:
        print(str.format("CFI node has no owner document: {} {}", cfi, node))
        return None

    x = None
    y = None
    range_ = None

    if jstype(r.offset) is "number":
        # Character offset
        range_ = ndoc.createRange()
        if r.forward:
            try_list = [{'start':0, 'end':0, 'a':0.5}, {'start':0, 'end':1, 'a':1}, {'start':-1, 'end':0, 'a':0}]
        else:
            try_list = [{'start':0, 'end':0, 'a':0.5}, {'start':-1, 'end':0, 'a':0}, {'start':0, 'end':1, 'a':1}]
        a = None
        node_len = node.nodeValue.length if node.nodeValue else 0
        offset = r.offset
        if not offset:
            range_.setStart(node, 0)
            range_.setEnd(node, 0)
        else:
            rects = v'[]'
            for v'var i = 0; i < 2; i++':
                # Try reducing the offset by 1 if we get no match as if it refers to the position after the
                # last character we wont get a match with getClientRects
                offset = r.offset - i
                if offset < 0:
                    offset = 0
                k = 0
                while not rects?.length and k < try_list.length:
                    t = try_list[k]
                    k += 1
                    start_offset = offset + t.start
                    end_offset = offset + t.end
                    a = t.a
                    if start_offset < 0 or end_offset >= node_len:
                        continue
                    range_.setStart(node, start_offset)
                    range_.setEnd(node, end_offset)
                    rects = range_.getClientRects()

            if not rects?.length:
                print(str.format("Could not find caret position for {} : rects: {} offset: {}", cfi, rects, r.offset))
                return None

    else:
        x, y = r.x, r.y

    return {'x':x, 'y':y, 'node':r.node, 'time':r.time, 'range':range_, 'a':a}

# }}}

def scroll_to(cfi, callback, doc):  # {{{
    doc = doc or window.doc
    point_ = point(cfi, doc)
    if not point_:
        print("No point found for cfi: " + cfi)
        return
    if jstype(point_.time) is 'number':
        set_current_time(point_.node, point_.time)

    if point_.range is not None:
        # Character offset
        r = point_.range
        so, eo, sc, ec = r.startOffset, r.endOffset, r.startContainer, r.endContainer
        node = r.startContainer
        ndoc = node.ownerDocument
        span = ndoc.createElement('span')
        span.setAttribute('style', 'border-width: 0; padding: 0; margin: 0')
        r.surroundContents(span)
        scroll_viewport.scroll_into_view(span)
        fn = def():
            # Remove the span and get the new position now that scrolling
            # has (hopefully) completed
            #
            # In WebKit, the boundingrect of the span is wrong in some
            # situations, whereas in IE resetting the range causes it to
            # loose bounding info. So we use the range's rects unless they
            # are absent, in which case we use the span's rect
            #
            rect = span.getBoundingClientRect()

            # Remove the span we inserted
            p = span.parentNode
            for node in span.childNodes:
                span.removeChild(node)
                p.insertBefore(node, span)
            p.removeChild(span)
            p.normalize()

            # Reset the range to what it was before the span was added
            offset = so
            while offset > -1:
                try:
                    r.setStart(sc, offset)
                    break
                except:
                    offset -= 1

            offset = eo
            while offset > -1:
                try:
                    r.setEnd(ec, offset)
                    break
                except:
                    offset -= 1

            rects = r.getClientRects()
            if rects.length > 0:
                rect = rects[0]

            x = (point_.a*rect.left + (1-point_.a)*rect.right)
            y = (rect.top + rect.bottom)/2
            x, y = scroll_viewport.viewport_to_document(x, y, ndoc)
            if callback:
                callback(x, y)
    else:
        node = point_.node
        scroll_viewport.scroll_into_view(node)

        fn = def():
            r = node.getBoundingClientRect()
            # Start of element is right side in RTL, so be sure to get that side in RTL mode
            x, y = scroll_viewport.viewport_to_document(
                r.left if scroll_viewport.ltr() else r.right, r.top, node.ownerDocument)
            if jstype(point_.x) is 'number' and node.offsetWidth:
                x += (point_.x*node.offsetWidth)/100
            if jstype(point_.y) is 'number' and node.offsetHeight:
                y += (point_.y*node.offsetHeight)/100
            scroll_viewport.scroll_to(x, y)
            if callback:
                callback(x, y)

    setTimeout(fn, 10)

# }}}

def at_point(ox, oy):  # {{{
    # The CFI at the specified point. Different to at() in that this method
    # returns null if there is an error, and also calculates a point from
    # the CFI and returns null if the calculated point is far from the
    # original point.

    def dist(p1, p2):
        Math.sqrt(Math.pow(p1[0]-p2[0], 2), Math.pow(p1[1]-p2[1], 2))

    try:
        cfi = at(ox, oy)
        p = point(cfi)
    except Exception:
        cfi = None

    if not p:
        return None

    if cfi:
        if p.range is not None:
            r = p.range
            rect = r.getClientRects()[0]

            x = (p.a*rect.left + (1-p.a)*rect.right)
            y = (rect.top + rect.bottom)/2
            x, y = scroll_viewport.viewport_to_document(x, y, r.startContainer.ownerDocument)
        else:
            node = p.node
            r = node.getBoundingClientRect()
            # Start of element is right side in RTL, so be sure to get that side in RTL mode
            x, y = scroll_viewport.viewport_to_document(
                r.left if scroll_viewport.ltr() else r.right, r.top, node.ownerDocument)
            if jstype(p.x) is 'number' and node.offsetWidth:
                x += (p.x*node.offsetWidth)/100
            if jstype(p.y) is 'number' and node.offsetHeight:
                y += (p.y*node.offsetHeight)/100

        if dist(scroll_viewport.viewport_to_document(ox, oy), v'[x, y]') > 50:
            cfi = None

    return cfi
# }}}

def at_current():  # {{{
    winx, winy = window_scroll_pos()
    winw, winh = scroll_viewport.width(), scroll_viewport.height()
    winw = max(winw, 400)
    winh = max(winh, 600)
    deltay = Math.floor(winh/50)
    deltax = Math.floor(winw/25)
    miny = max(-winy, -winh)
    maxy = winh
    minx = max(-winx, -winw)
    maxx = winw

    def x_loop(cury):
        for direction in v'[-1, 1]':
            delta = deltax * direction
            curx = 0
            while not ((direction < 0 and curx < minx) or (direction > 0 and curx > maxx)):
                cfi = at_point(curx, cury)
                if cfi:
                    return cfi
                curx += delta

    for direction in v'[-1, 1]':
        delta = deltay * direction
        cury = 0
        while not( (direction < 0 and cury < miny) or (direction > 0 and cury > maxy) ):
            cfi = x_loop(cury, -1)
            if cfi:
                return cfi
            cury += delta

    # Use a spatial offset on the html element, since we could not find a
    # normal CFI
    x, y = window_scroll_pos()
    de = document.documentElement
    rect = de.getBoundingClientRect()
    px = (x*100)/rect.width
    py = (y*100)/rect.height
    cfi = str.format("/2@{}:{}", fstr(px), fstr(py))

    return cfi

# }}}

def cfi_for_selection(r):  # {{{
    if not r:
        r = window.getSelection().getRangeAt(0)

    def pos(container, offset):
        nt = container.nodeType
        if nt is Node.TEXT_NODE or nt is Node.CDATA_SECTION_NODE or nt is Node.COMMENT_NODE:
            return container, offset
        if nt is Node.ELEMENT_NODE and offset and container.childNodes.length > offset:
            return container.childNodes[offset], 0
        return container, offset

    return {
        'start': encode(r.startContainer.ownerDocument, *pos(r.startContainer, r.startOffset)),
        'end': encode(r.endContainer.ownerDocument, *pos(r.endContainer, r.endOffset)),
    }

# }}}

def range_from_cfi(start, end):  # {{{
    start = decode(start)
    end = decode(end)
    if not start or start.error or not end or end.error:
        return
    r = document.createRange()
    r.setStart(start.node, start.offset)
    r.setEnd(end.node, end.offset)
    return r
# }}}
